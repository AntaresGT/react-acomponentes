{"version":3,"file":"index.modern.js","sources":["../src/AComponentes/AUtileriaComponentes/AControl.js","../src/AComponentes/AEtiqueta/index.js","../src/AComponentes/AUtileriaComponentes/AExpReg.js","../src/AComponentes/ACajaTexto/index.js","../src/AComponentes/ABoton/index.js","../src/Recursos/Imagenes/telefono_blanco.png","../src/AComponentes/ATelefono/index.js","../src/AComponentes/ATitulosPantallas/index.js","../src/AComponentes/ATabla/index.js","../src/AComponentes/ACheckBox/index.js","../src/AComponentes/AArchivos/index.js","../src/AComponentes/AMultimedia/index.js","../src/AComponentes/APanel/index.js","../src/Recursos/Imagenes/icono_man.png","../src/AComponentes/ALogoCarga/index.js"],"sourcesContent":["import { v4 } from 'uuid';\r\n\r\n/**\r\n * Esta clase controla los nombres de los componentes\r\n * para que no se repiten en toda la web\r\n */\r\nclass AControl{\r\n    constructor(){\r\n        this.lista_controles = [];\r\n    }\r\n\r\n    GenerarUuidControl(){\r\n        let uuidValido = false;\r\n        let contador = 0;\r\n        let uuid = \"\";\r\n        while(!uuidValido){\r\n            uuid = v4();\r\n            if(!this.lista_controles.includes(uuid)){\r\n                uuidValido = true;\r\n                this.lista_controles.push(uuid);\r\n                break;\r\n            }\r\n\r\n            contador++;\r\n\r\n            if(contador > 500){\r\n                uuid = v4();\r\n                break;\r\n            }\r\n        }\r\n\r\n        return uuid;\r\n    }\r\n};\r\n\r\nconst aControl = new AControl();\r\nexport default aControl;","import React from \"react\";\r\nimport \"./AEtiqueta.css\";\r\n\r\n/**\r\n * @typedef PropsAEtiqueta\r\n * @property {boolean} [props.visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} [props.para] Id del control que se le asignará a la etiqueta\r\n * @property {string|StyleSheet} [props.estilos] Estilos que se le aplicarán a la etiqueta\r\n * @property {string} [props.className] Clase que se le aplicará a la etiqueta\r\n * @property {string} [props.para] Id del control que se le asignará a la etiqueta\r\n * @class AEtiqueta\r\n * @extends {React.Component<PropsAEtiqueta>}\r\n */\r\nclass AEtiqueta extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n        \r\n\r\n        if(visible){\r\n            return(\r\n                <label {...this.props} style={this.props.estilos} className={\"aetiqueta \" + this.props.className} htmlFor={this.props.para}>{this.props.children}</label>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AEtiqueta;","/**\r\n * Está clase proporciona o valida expresiones regulares estandares\r\n * o cualquier otra expresión regular que se desee validar\r\n */\r\nclass AExpReg {\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Evalua el patrón con la cadena de texto especificada\r\n     * si es valida devuelve true de lo contrario devuelve false\r\n     * @param {RegExp} expreg Recibe el patrón a evaluar(Expresión regular)\r\n     * @param {string} str Recibe la cadena de texto a evaluar\r\n     * @returns {boolean}\r\n     */\r\n    static validarExpresionRegular(expreg, str) {\r\n        return expreg.test(str);\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de numeros enteros\r\n     * al menos 1 numero entero entre 0 y 9\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroEntero() {\r\n        return /^[0-9]+$/\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de correo electrónico\r\n     * Una implementación del Estandard Official: RFC 5322: ( valida en el 99.99% de los emails existentes )\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerExpRegCorreoElectronico() {\r\n        return /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroTelefono() {\r\n        return /\\(?\\+[0-9]{1,3}\\)? ?-?[0-9]{1,3} ?-?[0-9]{3,5} ?-?[0-9]{4}( ?-?[0-9]{3})? ?(\\w{1,10}\\s?\\d{1,6})?/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroTelefonoSinSignoMas() {\r\n        return /((\\(?\\+[0-9]{1,3}\\)? ?-?)|)[0-9]{1,3} ?-?[0-9]{3,5} ?-?[0-9]{4}( ?-?[0-9]{3})? ?(\\w{1,10}\\s?\\d{1,6})?/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular que valida solo letras con espacios\r\n     * @returns {RegExp} Devuelve una expresión\r\n     */\r\n    static obtenerRegSoloLetrasConEspacios() {\r\n        return /^[(a-z|A-Z) áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está funcioón devuelve una expresión regular que valida solo letras, numeros con espacios\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegSoloLetrasNumerosConEspacios() {\r\n        return /^[(a-z|A-Z)0-9 \\_\\-áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular que valida solo letras con espacios al menos 1 letra nada más\r\n     * @returns {RegExp} Devuele una expresión regular\r\n     */\r\n    static obtenerRegSoloLetrasConEspaciosAlMenos1Letra() {\r\n        return /^[a-zA-Z áéíóúÁÉÍÓÚ]+$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de direcciones de casas, negocios, etc.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegDirecciones() {\r\n        return /^[(a-z|A-Z) _\\.\\-,0-9\\n\\#áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de direcciones de casas, negocios, etc.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNombreNegocio() {\r\n        return /^[(a-z|A-Z) _\\.\\-,0-9\\n\\#áéíóúÁÉÍÓÚ]+$/gm\r\n    }\r\n\r\n    /**\r\n     * La contraseña debe tener al entre 8 y 16 caracteres,\r\n     * al menos un dígito, al menos una minúscula,\r\n     * al menos una mayúscula y al menos un caracter no alfanumérico.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegContrasena() {\r\n        return /(?=.*\\d)(?=.*[\\u0021-\\u002b\\u003c-\\u0040])(?=.*[A-Z])(?=.*[a-z])\\S{8,16}$/gm\r\n    }\r\n\r\n    /**\r\n     * Está expresión valida un pin de entre 4 y 8 digitos\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegParaPin() {\r\n        return /^\\d{4,8}/gm\r\n    }\r\n\r\n    /**\r\n     * Está expresión valida digitos enteros o que lleven 2 decimales\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegParaNumerosCon2Decimales() {\r\n        return /^\\d+(\\.\\d{1,2})?$/gm\r\n    }\r\n\r\n    /**\r\n     * Valida un número entero, la cadena debe contener al menos un número entre 0 y 9\r\n     * @param {string} texto Texto de entrada para validar\r\n     * @returns {boolean} Devuelve verdadero si la cadena es valida\r\n     */\r\n    static validarNumeroEntero(texto) {\r\n        return AExpReg.obtenerRegNumeroEntero().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida un numeros entero o numeros con 2 decimales\r\n     * @param {string} texto Texto de entrada para validar\r\n     * @returns {boolean} Devuelve verdadero si la cadena es valida\r\n     */\r\n    static validarNumeroCon2Decimales(texto) {\r\n        return AExpReg.obtenerRegParaNumerosCon2Decimales().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida una cadena un pin de entre 4 y 8 digitos\r\n     * @param {string} texto Texto a validar\r\n     * @returns {boolean}\r\n     */\r\n    static validarPin(texto) {\r\n        return AExpReg.obtenerRegParaPin().test(texto);\r\n    }\r\n\r\n    /**\r\n     * La contraseña debe tener al entre 8 y 16 caracteres,\r\n     * al menos un dígito, al menos una minúscula,\r\n     * al menos una mayúscula y al menos un caracter no alfanumérico.\r\n     * @param {string} contrasena Parametro que recibe un string de la contraseña\r\n     * @returns {boolean} Devuelve una expresión regular\r\n     */\r\n    static validarContrasena(contrasena) {\r\n        return AExpReg.obtenerRegContrasena().test(contrasena);\r\n    }\r\n\r\n    /**\r\n     * Valida si el nombre de negocio contiene caracteres validos\r\n     * @param {string} nombre_negocio Recibe un nombre de negocio\r\n     * @returns {boolean}\r\n     */\r\n    static validarNombreNegocio(nombre_negocio) {\r\n        return AExpReg.obtenerRegDirecciones().test(nombre_negocio);\r\n    }\r\n\r\n    /**\r\n     * Está función valida un correo electrónico y devuelve verdadero o falso si el patrón coincide\r\n     * @param {string} correo Recibe el correo electrónico para validar\r\n     * @returns {boolean}\r\n     */\r\n    static validarCorreoElectronico(correo) {\r\n        return AExpReg.obtenerExpRegCorreoElectronico().test(correo);\r\n    }\r\n\r\n    /**\r\n     * Valida cualquier número de telefono\r\n     * @param {string} telefono Recibe cualquier número de Teléfono\r\n     * @returns {boolean} Devuelve verdadero si el número coincide, de lo contrario fallbackResource\r\n     */\r\n    static validarNumeroTelefonico(telefono) {\r\n        return AExpReg.obtenerRegNumeroTelefono().test(telefono);\r\n    }\r\n\r\n    /**\r\n     * Valida cualquier número de telefono sin signo mas obligatorio\r\n     * @param {string} telefono Recibe cualquier número de Teléfono\r\n     * @returns {boolean} Devuelve verdadero si el número coincide, de lo contrario fallbackResource\r\n     */\r\n    static validarNumeroTelefonicoSinSignoMas(telefono) {\r\n        return AExpReg.obtenerRegNumeroTelefonoSinSignoMas().test(telefono);\r\n    }\r\n\r\n    /**\r\n     * Validaa si el texto no contiene números o cualquier otro caracter que no sea de (A-Z|a-z) con espacios o sin espacios\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patron\r\n     */\r\n    static validarSoloLetrasConEspacios(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasConEspacios().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida si el texto no contiene números o cualquier otro caracter\r\n     * el texto debe contener al menos un caracter para que devuelva verdadero\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarSoloLetrasConEspaciosAlMenos1Letra(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasConEspaciosAlMenos1Letra().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Está función valida si la dirección es contiene los caracteres correctos\r\n     * @param {string} direccion Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarDireccion(direccion) {\r\n        return AExpReg.obtenerRegDirecciones().test(direccion);\r\n    }\r\n\r\n    /**\r\n     * Está función valida si el texto contiene los caracteres correctos en relación con el patrón\r\n     * Si el patrón coincide con el texto devuelve verdadero, de lo contrario devuelve falso\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarSoloLetrasNumerosConEspacios(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasNumerosConEspacios().test(texto);\r\n    }\r\n\r\n};\r\n\r\nexport default AExpReg;","import React from \"react\";\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\nimport './ACajaTexto.css';\r\n\r\n// Componentes\r\nimport AEtiqueta from '../AEtiqueta';\r\n\r\n// Utilidades\r\nimport AExpReg from \"./../AUtileriaComponentes/AExpReg\";\r\n\r\n\r\n\r\n/**\r\n * @typedef PropsACajaTexto\r\n * @property {boolean} [visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} valor Valor que se muestra en el control\r\n * @property {FunctionStringCallback} [cambioTexto] Función que se ejecuta cuando se cambia el texto\r\n * @property {string} [titulo] Texto que se mostrará en la etiqueta\r\n * @property {IconType} [icono] Icono que se mostrará junto al texto\r\n * @property {StyleSheet} [estilos] Propiedad que le da estilos al contenedor\r\n * @property {string} [tipo] Propiedad que le dice al control si es de tipo texto o password o email, etc.\r\n * @property {boolean} [requerido] Si es true, se marca como obligatorio\r\n * @property {string} [expRegular] Expresión regular que se aplicará al texto\r\n * @property {string} [className] Propiedad que le da estilos al contenedor\r\n * @property {string} [classNameTitulo] Propiedad que le da estilos al titulo\r\n * @property {string} [estilosTitulo] Propiedad que le da estilos al titulo\r\n * @property {string} [classNameTexto] Propiedad que le da estilos a la caja de texto (input)\r\n * @property {string} [estilosTexto] Propiedad que le da estilos a la caja de texto (input)\r\n * @property {string} [classNameError] Propiedad que le da estilos al texto de error\r\n * @property {string} [estilosError] Propiedad que le da estilos al texto de error\r\n * @property {string} [placeholder] Texto que se muestra en el control cuando no hay texto\r\n * @property {boolean} [autoFocus] Si es true, se pone el foco en el control\r\n * @extends {React.Component<PropsACajaTexto>}\r\n */\r\nclass ACajaTexto extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            lbd_error: \"\"\r\n        };\r\n        this.uuid = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    get TipoAControl(){\r\n        return \"ACajaTexto\";\r\n    }\r\n\r\n    /**\r\n     * Obtiene el nombre del control\r\n     * @returns {string}\r\n     */\r\n    get Refuuid(){\r\n        return this.uuid;\r\n    }\r\n\r\n    /**\r\n     * Está función envia el texto al padre\r\n     * @param {string} texto Texto que se ingresó en el control\r\n     */\r\n    _cambioTexto(texto){\r\n        if(this.props.hasOwnProperty('cambioTexto')){\r\n\r\n            let expReg = this.props.expRegular;\r\n\r\n            if(expReg !== undefined){\r\n                if(!AExpReg.validarExpresionRegular(expReg, texto)){\r\n                    this.setState({\r\n                        lbd_error: \"El texto no cumple con los caracteres validos\"\r\n                    });\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        lbd_error: \"\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.props.cambioTexto(texto);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Esta función coloca un texto de error en el componente\r\n     * @param {string} err \r\n     */\r\n    FijarMsjError(err){\r\n        this.setState({\r\n            lbd_error: err\r\n        });\r\n    }\r\n\r\n    TituloACajaTexto = () => {\r\n        if(this.props.hasOwnProperty('titulo')){\r\n            return (\r\n                <AEtiqueta\r\n                    para={this.uuid}\r\n                    className={this.props.classNameTitulo}\r\n                    estilos={this.props.estilosTitulo}\r\n                >\r\n                    {this.props.titulo}\r\n                </AEtiqueta>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n\r\n    TextoError = () => {\r\n        if(this.state.lbd_error === \"\"){\r\n            return <></>;\r\n        }\r\n        else{\r\n            return(\r\n                <AEtiqueta\r\n                    className={\"acajatexto-error \" + this.props.classNameError}\r\n                    estilos={this.props.estilosError}\r\n                >\r\n                    Error\r\n                </AEtiqueta>\r\n            );\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div\r\n                    className={\"acajatexto \" + this.props.className}\r\n                    style={this.props.estilos}\r\n                >\r\n                    <this.TituloACajaTexto />\r\n                    <div className=\"acajatexto-contenedor\" style={{ width: \"100%\" }}>\r\n                        <input\r\n                            required={this.props.requerido}\r\n                            value={this.props.valor}\r\n                            type={this.props.tipo || \"text\"}\r\n                            name={this.uuid}\r\n                            id={this.uuid}\r\n                            className={\"acajatexto-txt \" + this.props.classNameTexto}\r\n                            onChange={(e) => {e.preventDefault(); this._cambioTexto(e.target.value)}}\r\n                            pattern={this.props.expRegular}\r\n                            placeholder={this.props.placeholder}\r\n                            style={this.props.estilosTexto}\r\n                            autoFocus={this.props.autoFocus}\r\n                        />\r\n                        {\r\n                            this.props.hasOwnProperty('icono') &&\r\n                            <div className=\"acajatexto-contenedor-icono\">\r\n                                {this.props.icono}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <this.TextoError />\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ACajaTexto;","import React from \"react\";\r\nimport './ABoton.css';\r\n\r\n/**\r\n * @typedef PropsABoton\r\n * @property {MouseEvent} botonPresionado Evento que se ejecuta cuando se presiona el botón\r\n * @property {boolean} [visible] Si es true, se muestra el botón, si es false, no se muestra\r\n * @property {string} [className] Propiedad que le da estilos al botón\r\n * @property {\"button\"|\"submit\"|\"reset\"} [tipoBoton] Tipo de botón que se va a mostrar\r\n * @property {\"primario\"|\"secundario\"|\"ok\"|\"peligro\"|\"link\"} [tipoBotonColor] Le da color al boton\r\n * @property {StyleSheet} [estilos] Propiedad que le da estilos al botón\r\n * @extends {React.Component<PropsABoton>}\r\n */\r\nclass ABoton extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * Esta funcion envia el evento al componente padre\r\n     * @param {MouseEvent} e Evento que se ejecuta cuando se presiona el botón\r\n     */\r\n    _botonPresionado(e){\r\n        e.preventDefault();\r\n        this.props.botonPresionado(e);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n        let tipoBotonColor = \"primario\";\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(this.props.hasOwnProperty('tipoBotonColor')){\r\n            tipoBotonColor = this.props.tipoBotonColor;\r\n        }\r\n        \r\n        if(visible){\r\n            return (\r\n                <button\r\n                    className={\"aboton \" + tipoBotonColor + \" \" + this.props.className}\r\n                    type={this.props.tipoBoton || \"button\"}\r\n                    style={this.props.estilos}\r\n                    onClick={(e) => this._botonPresionado(e)}\r\n                >\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ABoton;","/* loaded by smart-asset */\nexport default \"telefono_blanco~gzxlAiPo.png\"","import React from 'react';\r\nimport './ATelefono.css';\r\nimport ABoton from './../ABoton';\r\nimport { FiSearch } from 'react-icons/fi';\r\nimport Telefono from './../../Recursos/Imagenes/telefono_blanco.png';\r\n\r\n/**\r\n * @typedef PropsATelefono\r\n * @property {boolean} [visible] Si el telefono esta visible o no.\r\n * @property {string} [className] Clase estilos CSS.\r\n * @property {string} [classNameABotones] Clase estilos CSS para los botones.\r\n * @property {StyleSheet} [estilosABotones] Estilos CSS para los botones.\r\n * @property {string} [classNamePublicidad] Clase estilos CSS para la publicidad.\r\n * @property {StyleSheet} [estilosPublicidad] Estilos CSS para la publicidad.\r\n * @property {string} titulo Titulo del telefono.\r\n * @property {string[]} botones Lista de botones a renderizar\r\n * @property {StyleSheet} [estilos] Estilos CSS.\r\n * @extends {React.Props<PropsATelefono>}\r\n */\r\nclass ATelefono extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div className={'atelefono ' + this.props.className} style={this.props.estilos}>\r\n                    <div className='atelefono-contenedor-telefono'>\r\n                        <img src={Telefono} alt='Teléfono' />\r\n                    </div>\r\n                    <div className='atelefono-contenedor-datos'>\r\n                        <div className='atelefono-titulo'>\r\n                            <div className='atelefono-titulo-items'>{this.props.titulo}</div>\r\n                            <FiSearch className='atelefono-titulo-items' />\r\n                        </div>\r\n                        <div className={'atelefono-publicidad ' + this.props.classNamePublicidad} style={this.props.estilosPublicidad}>\r\n                            {this.props.children}\r\n                        </div>\r\n                        <div className='atelefono-botones'>\r\n                            {\r\n                                this.props.botones.map((boton, indice) => {\r\n                                    return(\r\n                                        <ABoton className={'atelefono-boton ' + this.props.classNameABotones} key={indice} estilos={this.props.estilosABotones}>\r\n                                            {boton}\r\n                                        </ABoton>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ATelefono;","import React from 'react';\r\nimport './ATitulosPantallas.css';\r\n\r\n/**\r\n * @typedef PropsATitulosPantallas\r\n * @property {string} [className] Clase CSS para el componente.\r\n * @property {string} [classNameTitulo] Clase CSS para el titulo.\r\n * @property {StyleSheet} [estilosTitulo] Estilos CSS para el titulo.\r\n * @property {string} [classNameTelefono] Clase CSS para el telefono.\r\n * @property {StyleSheet} [estilosTelefono] Estilos CSS para el telefono.\r\n * @property {boolean} [visible] Indica si el componente debe ser visible o no.\r\n * @property {string} titulo Titulo que se mostrará en la pantalla.\r\n * @property {string} telefono Telefono que se mostrará en la pantalla.\r\n * @property {StyleSheet} [estilos] Estilos CSS para el componente.\r\n * @extends {React.Component<PropsATitulosPantallas>}\r\n */\r\nclass ATitulosPantallas extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div\r\n                className={'atitulospantallas ' + this.props.className}\r\n                style={this.props.estilos}\r\n            >\r\n                <h2 className={this.props.classNameTitulo} style={this.props.estilosTitulo}>{this.props.titulo}</h2>\r\n                <p className={this.props.classNameTelefono} style={this.props.estilosTelefono}>Para asesoría llamar al teléfono: {this.props.telefono}</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ATitulosPantallas;","import React from 'react';\r\nimport './ATabla.css';\r\n\r\n/**\r\n * @typedef PropsATabla\r\n * @property {string} [className] Clase CSS para el componente.\r\n * @property {Array<string|React.Component|number>} [encabezados] Texto o componente que se mostrará en el encabezado de la tabla.\r\n * @property {Array<Array<string|React.Component|number>>} [datos] Datos que se mostrarán en la tabla.\r\n * @property {string} [classNameFila] Clase CSS para las filas de la tabla.\r\n * @property {StyleSheet} [estilosFila] Estilos CSS para las filas de la tabla.\r\n * @property {string} [classNameCelda] Clase CSS para las celdas de la tabla.\r\n * @property {StyleSheet} [estilosCelda] Estilos CSS para las celdas de la tabla.\r\n * @property {string} [classNameDatos] Clase CSS para los datos de la tabla.\r\n * @property {StyleSheet} [estilosDatos] Estilos CSS para los datos de la tabla.\r\n * @extends {React.Component<PropsATabla>}\r\n */\r\nclass ATabla extends React.Component {\r\n\r\n    render() {\r\n        let visible = true;\r\n\r\n        if (this.props.hasOwnProperty('visible')) {\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if (visible) {\r\n            return (\r\n                <div className={\"atabla \" + this.props.className}>\r\n                    <table className='atabla-tabla'>\r\n                        <thead className='atabla-cabeceras'>\r\n                            <tr>\r\n                                {\r\n                                    this.props.encabezados.map((objeto, indice) => {\r\n                                        return (\r\n                                            <th className='atabla-cabecera' key={indice}>\r\n                                                {objeto}\r\n                                            </th>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className={'atabla-contenido ' + this.props.classNameDatos} style={this.props.estilosDatos}>\r\n                            {\r\n                                this.props.datos.map((fila, indice) => {\r\n                                    return (\r\n                                        <tr\r\n                                            key={indice}\r\n                                            className={\"atabla-fila \" + this.props.classNameFila}\r\n                                            style={this.props.estilosFila}\r\n                                        >\r\n                                            {\r\n                                                fila.map((objeto, indice) => {\r\n                                                    return (\r\n                                                        <td\r\n                                                            className={'atabla-celda ' + this.props.classNameCelda}\r\n                                                            key={indice}\r\n                                                            style={this.props.estilosCelda}\r\n                                                        >\r\n                                                            {objeto}\r\n                                                        </td>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ATabla;","import React from 'react';\r\nimport './ACheckBox.css';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\n\r\n/**\r\n * @typedef PropsACheckBox\r\n * @property {string} [texto] Texto que se muestra a la par checkbox\r\n * @property {StyleSheet} [estilos] Estilos CSS para el componente\r\n * @property {boolean} [visible] Si es true se muestra, si es false no se muestra\r\n * @property {string} [className] Clase css que se le pone al componente\r\n * @property {boolean} valor Si es true se marca, si es false no se marca\r\n * @property {import('react').ChangeEvent} cambioCheck Función que se ejecuta al cambiar el checkbox\r\n * @extends {React.Component<PropsACheckBox>}\r\n */\r\nclass ACheckBox extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    _acheckbox_cambia(){\r\n        this.props.cambioCheck(!this.props.valor);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <label\r\n                    className={'acheckbox ' + this.props.className}\r\n                    htmlFor={this.uuidAControl}\r\n                    style={this.props.estilos}\r\n                >\r\n                    {this.props.texto}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.uuidAControl}\r\n                        id={this.uuidAControl}\r\n                        checked={this.props.valor}\r\n                        onChange={() => this._acheckbox_cambia()}\r\n                    />\r\n                    <span className='checkmark'></span>\r\n                </label>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ACheckBox;","import React from 'react';\r\nimport './AArchivos.css';\r\nimport AEtiqueta from './../AEtiqueta';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n/**\r\n * \r\n * @typedef PropsAArchivos\r\n * @property {string} texto Texto que se muestra en el control\r\n * @property {boolean} [visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} [className] Clase CSS del contenedor\r\n * @property {string} [classNameEtiqueta] Clase CSS de la etiqueta\r\n * @property {FileCallback} subioArchivo Función que se ejecuta cuando se sube un archivo\r\n * @extends {React.Component<PropsAArchivos>}\r\n */\r\nclass AArchivos extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    /**\r\n     * @param {string} nombre_archivo Nombre del archivo\r\n     * @returns {boolean} Si es true, es un archivo válido, si es false, no es un archivo válido\r\n     */\r\n    _esArchivoValido(nombre_archivo){\r\n        let extensiones_permitidas = [\".mp4\", \".png\", \".gif\", \".jpeg\", \".jpg\"];\r\n        for(let i = 0; i < extensiones_permitidas.length; i++){\r\n            if(nombre_archivo.toLowerCase().endsWith(extensiones_permitidas[i])){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Esta funcion se ejecuta cuando se sube un archivo\r\n     * @param {React.ChangeEvent<HTMLInputElement>} e \r\n     */\r\n    _subieronArchivo(e){\r\n        e.preventDefault();\r\n        if(e.target.files.length > 1){\r\n            Swal.fire(\"Advertencia\", \"Solo se puede subir un archivo a la vez\", \"warning\");\r\n        }\r\n        else\r\n        if(e.target.files.length > 0){\r\n            let archivo = e.target.files[0];\r\n            if(this._esArchivoValido(archivo.name)){\r\n                this.props.subioArchivo(archivo);\r\n            }\r\n            else{\r\n                Swal.fire(\"Advertencia\", \"El archivo no es válido\", \"warning\");\r\n            }\r\n        }\r\n        else{\r\n            this.props.subioArchivo(new File([], \"\"));\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty(\"visible\")){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div className={'aarchivos ' + this.props.className}>\r\n                    <input type=\"file\" id={this.uuidAControl} name={this.uuidAControl} accept={\"video/mp4, image/png, image/gif, image/jpeg\"} className={\"aarchivos-input\"} onChange={(e) => this._subieronArchivo(e)} />\r\n                    <AEtiqueta\r\n                        para={this.uuidAControl}\r\n                        className={\"aarchivos-etiqueta \" + this.props.classNameEtiqueta}\r\n                    >{this.props.texto}</AEtiqueta>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default AArchivos;","import React from 'react';\r\nimport './AMultimedia.css';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\n\r\n\r\n/**\r\n * @typedef PropsAMultimedia\r\n * @property {string} [className] Clase CSS\r\n * @property {StyleSheet} [estilos] Estilos CSS\r\n * @extends {React.Component<PropsAMultimedia>}\r\n */\r\nclass AMultimedia extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tipoMultimedia: \"imagen\"\r\n        }\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    /**\r\n     * Esta funcion dibuja en pantalla lo que trae en el archivo\r\n     * @param {File|Blob} archivo Archivo que se va a mostrar en pantalla\r\n     */\r\n    FijarArchivo(archivo) {\r\n        if(archivo instanceof Blob){\r\n\r\n            this.setState({ tipoMultimedia: \"imagen\" });\r\n\r\n            setTimeout(() => {\r\n                let archivoBlob = URL.createObjectURL(archivo);\r\n                document.getElementById(this.uuidAControl).src = archivoBlob;\r\n            }, 100);\r\n        }\r\n        else{\r\n            if(archivo.name.endsWith(\".mp4\")){\r\n                this.setState({ tipoMultimedia: \"video\" });\r\n            }\r\n            else{\r\n                this.setState({ tipoMultimedia: \"imagen\" });\r\n            }\r\n    \r\n            setTimeout(() => {\r\n                let archivoBlob = URL.createObjectURL(archivo);\r\n                document.getElementById(this.uuidAControl).src = archivoBlob;\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {\r\n                    this.state.tipoMultimedia === \"imagen\" &&\r\n                    <img id={this.uuidAControl} className={'amultimedia ' + this.className} style={this.props.estilos} alt={\"Archivo multimedia.\"} />\r\n                }\r\n                {\r\n                    this.state.tipoMultimedia === \"video\" &&\r\n                    <video id={this.uuidAControl} controls autoPlay className={'amultimedia ' + this.className} style={this.props.estilos}>\r\n                        Este navegador no soporta una previsualización del contenido multimedia.\r\n                    </video>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nexport default AMultimedia;","import React from \"react\";\r\nimport './APanel.css';\r\n\r\n/**\r\n * @typedef PropsAPanel\r\n * @property {string} className Clase CSS\r\n * @property {string} classNameFondo Clase CSS del fondo\r\n * @property {string} classNameTitulo Clase CSS del titulo\r\n * @property {boolean} visible Si es visible se muestra el modal\r\n * @property {boolean} [transparente] Si es transparente no muestra un fondo de lo contrario el fondo se pone con un color negro transparente, por defecto es false\r\n * @property {string} titulo Título del panel\r\n * @extends {React.Component<PropsAPanel>}\r\n * Esta clase es una componente que se sobre pone por encima de todo el HTML\r\n * actuando como un modal\r\n */\r\nclass APanel extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {\r\n                    this.props.visible &&\r\n                    <div\r\n                        className={\"apanel-fondo \" + this.props.classNameFondo}\r\n                        style={{\r\n                                background: this.props.transparente ? 'rgba(0,0,0,0)' : 'rgba(0,0,0,0.5)',\r\n                            }}\r\n                    >\r\n                        <div\r\n                            className={\"apanel \" + this.props.className}\r\n                        >\r\n                            <div\r\n                                className={\"apanel-titulo \" + this.props.classNameTitulo}\r\n                            >\r\n                                <p>{this.props.titulo}</p>\r\n                            </div>\r\n                            <div\r\n                                className={\"apanel-contenido \" + this.props.className}\r\n                            >\r\n                                {this.props.children}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default APanel;","/* loaded by smart-asset */\nexport default \"icono_man~MTHNXxtc.png\"","import IconoMan from './../../Recursos/Imagenes/icono_man.png';\r\nimport './ALogoCarga.css';\r\n\r\n/**\r\n * Este componente muestra una imagen de carga, mientras se hacen acciones que lleven tiempo\r\n * @param {Object} props Este parametro lo llena automaticamente con los datos que se le pasan al componente\r\n * @param {string} [props.className] Clase CSS\r\n * @param {boolean} props.visible Si es true, se muestra el componente, si es false, no se muestra\r\n * @param {string} props.texto Texto que se muestra en el componente mientras gira la imagen\r\n * @returns {React.Component}\r\n */\r\nfunction ALogoCarga(props) {\r\n\r\n    return(\r\n        <>\r\n            {\r\n                props.visible &&\r\n                <div\r\n                    className={\"alogocarga \" + (props.className || \"\")}\r\n                >\r\n                    <div className='alogocarga-contenedor'>\r\n                        <div>\r\n                            <div className='alogocarga-imagen'>\r\n                                <img src={IconoMan} alt='Logo de carga' />\r\n                            </div>\r\n                            <div className='alogocarga-texto'>\r\n                                {props.texto}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ALogoCarga;"],"names":["AControl","lista_controles","GenerarUuidControl","uuidValido","contador","uuid","v4","includes","push","aControl","AEtiqueta","props","render","visible","hasOwnProperty","React","estilos","className","para","children","Component","AExpReg","validarExpresionRegular","expreg","str","test","obtenerRegNumeroEntero","obtenerExpRegCorreoElectronico","obtenerRegNumeroTelefono","obtenerRegNumeroTelefonoSinSignoMas","obtenerRegSoloLetrasConEspacios","obtenerRegSoloLetrasNumerosConEspacios","obtenerRegSoloLetrasConEspaciosAlMenos1Letra","obtenerRegDirecciones","obtenerRegNombreNegocio","obtenerRegContrasena","obtenerRegParaPin","obtenerRegParaNumerosCon2Decimales","validarNumeroEntero","texto","validarNumeroCon2Decimales","validarPin","validarContrasena","contrasena","validarNombreNegocio","nombre_negocio","validarCorreoElectronico","correo","validarNumeroTelefonico","telefono","validarNumeroTelefonicoSinSignoMas","validarSoloLetrasConEspacios","validarSoloLetrasConEspaciosAlMenos1Letra","validarDireccion","direccion","validarSoloLetrasNumerosConEspacios","ACajaTexto","TituloACajaTexto","classNameTitulo","estilosTitulo","titulo","TextoError","state","lbd_error","classNameError","estilosError","_cambioTexto","expReg","expRegular","undefined","setState","cambioTexto","FijarMsjError","err","width","requerido","valor","tipo","classNameTexto","e","preventDefault","target","value","placeholder","estilosTexto","autoFocus","icono","ABoton","_botonPresionado","botonPresionado","tipoBotonColor","tipoBoton","ATelefono","Telefono","classNamePublicidad","estilosPublicidad","botones","map","boton","indice","classNameABotones","estilosABotones","ATitulosPantallas","classNameTelefono","estilosTelefono","ATabla","encabezados","objeto","classNameDatos","estilosDatos","datos","fila","classNameFila","estilosFila","classNameCelda","estilosCelda","ACheckBox","uuidAControl","_acheckbox_cambia","cambioCheck","AArchivos","_esArchivoValido","nombre_archivo","extensiones_permitidas","i","length","toLowerCase","endsWith","_subieronArchivo","files","Swal","fire","archivo","name","subioArchivo","File","classNameEtiqueta","AMultimedia","tipoMultimedia","FijarArchivo","Blob","setTimeout","archivoBlob","URL","createObjectURL","document","getElementById","src","APanel","classNameFondo","background","transparente","ALogoCarga","IconoMan"],"mappings":"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"}