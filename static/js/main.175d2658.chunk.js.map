{"version":3,"sources":["../../src/AComponentes/AUtileriaComponentes/AControl.js","../../src/AComponentes/AEtiqueta/index.js","../../src/AComponentes/AUtileriaComponentes/AExpReg.js","../../src/AComponentes/ABoton/index.js","../../src/AComponentes/ACajaTexto/index.js","../../src/AComponentes/ATelefono/index.js","../../src/AComponentes/ATitulosPantallas/index.js","../../src/AComponentes/ATabla/index.js","../../src/AComponentes/ACheckBox/index.js","../../src/AComponentes/AArchivos/index.js","../../src/AComponentes/AMultimedia/index.js","../../src/AComponentes/APanel/index.js","App.js","index.js"],"names":["aControl","AControl","this","lista_controles","GenerarUuidControl","uuidValido","contador","uuid","v4","includes","push","AEtiqueta","render","visible","props","hasOwnProperty","React","style","className","htmlFor","para","Component","AExpReg","validarExpresionRegular","expreg","obtenerRegNumeroEntero","obtenerExpRegCorreoElectronico","obtenerRegNumeroTelefono","obtenerRegNumeroTelefonoSinSignoMas","obtenerRegSoloLetrasConEspacios","obtenerRegSoloLetrasNumerosConEspacios","obtenerRegSoloLetrasConEspaciosAlMenos1Letra","obtenerRegDirecciones","obtenerRegNombreNegocio","obtenerRegContrasena","obtenerRegParaPin","obtenerRegParaNumerosCon2Decimales","validarNumeroEntero","validarNumeroCon2Decimales","validarPin","validarContrasena","validarNombreNegocio","validarCorreoElectronico","validarNumeroTelefonico","validarNumeroTelefonicoSinSignoMas","validarSoloLetrasConEspacios","validarSoloLetrasConEspaciosAlMenos1Letra","validarDireccion","validarSoloLetrasNumerosConEspacios","ABoton","_botonPresionado","e","botonPresionado","tipoBotonColor","type","tipoBoton","onClick","App","ReactDOM","document","getElementById"],"mappings":"gyBAmCMA,EAAW,IA7BXC,WACF,aACIC,KAAKC,gBAAkB,G,mBAG3BC,8BAII,IAHA,IAAIC,GAAJ,EACIC,EAAJ,EACIC,EAAJ,IACA,GAAkB,CAEd,GADAA,EAAOC,eACHN,KAAKC,gBAAgBM,SAAzB,GAAwC,CACpCJ,KACAH,KAAKC,gBAAgBO,KAAKH,GAC1B,MAKJ,KAFAD,EAEA,IAAkB,CACdC,EAAOC,cACP,OAIR,OAAOD,G,EAzBTN,ICOAU,cAEF,cAAkB,OACd,YADc,S,0BAIlBC,kBACI,IAAIC,GAAJ,EAMA,OALGX,KAAKY,MAAMC,eAAd,aACIF,EAAUX,KAAKY,MAAfD,SAIJ,EAEQG,+BAAWd,KAAXc,OAAuBC,MAAOf,KAAKY,MAAnCE,QAAkDE,UAAW,aAAehB,KAAKY,MAAjFE,UAAkGG,QAASjB,KAAKY,MAAMM,OAAOlB,KAAKY,MADtI,UAKOE,2BAAP,O,EAnBNL,CAAkBK,IAAMK,WCTxBC,aAKF,c,SAWOC,wBAAP,cACI,OAAOC,OAAP,I,EAQGC,uBAAP,WACI,MAAO,Y,EAQJC,+BAAP,WACI,MAAO,6I,EAOJC,yBAAP,WACI,MAAO,sG,EAOJC,oCAAP,WACI,MAAO,2G,EAOJC,gCAAP,WACI,MAAO,6D,EAOJC,uCAAP,WACI,MAAO,oE,EAOJC,6CAAP,WACI,MAAO,0D,EAOJC,sBAAP,WACI,MAAO,0E,EAOJC,wBAAP,WACI,MAAO,0E,EASJC,qBAAP,WACI,MAAO,+E,EAOJC,kBAAP,WACI,MAAO,c,EAOJC,mCAAP,WACI,MAAO,uB,EAQJC,oBAAP,YACI,OAAOf,gCAAP,I,EAQGgB,2BAAP,YACI,OAAOhB,4CAAP,I,EAQGiB,WAAP,YACI,OAAOjB,2BAAP,I,EAUGkB,kBAAP,YACI,OAAOlB,8BAAP,I,EAQGmB,qBAAP,YACI,OAAOnB,+BAAP,I,EAQGoB,yBAAP,YACI,OAAOpB,wCAAP,I,EAQGqB,wBAAP,YACI,OAAOrB,kCAAP,I,EAQGsB,mCAAP,YACI,OAAOtB,6CAAP,I,EAQGuB,6BAAP,YACI,OAAOvB,yCAAP,I,EASGwB,0CAAP,YACI,OAAOxB,sDAAP,I,EAQGyB,iBAAP,YACI,OAAOzB,+BAAP,I,EASG0B,oCAAP,YACI,OAAO1B,gDAAP,I,EArOFA,GCSA2B,GCqBmBjC,IAAMK,UDrBzB4B,YAEF,cAAkB,OACd,YADc,S,kCAQlBC,6BACIC,mBACAjD,KAAKY,MAAMsC,gBAAgBD,I,EAG/BvC,kBAAQ,WACAC,GAAJ,EACIwC,EAAJ,WAUA,OARGnD,KAAKY,MAAMC,eAAd,aACIF,EAAUX,KAAKY,MAAfD,SAGDX,KAAKY,MAAMC,eAAd,oBACIsC,EAAiBnD,KAAKY,MAAtBuC,gBAGJ,EAEQrC,4BACIE,UAAW,UAAYmC,EAAiB,IAAMnD,KAAKY,MADvDE,UAEIsC,KAAMpD,KAAKY,MAAMyC,WAFrBvC,SAGIC,MAAOf,KAAKY,MAHhBE,QAIIwC,QAAS,mBAAO,mBAAP,KAERtD,KAAKY,MAPd,UAYOE,2BAAP,O,EAxCNiC,CAAejC,IAAMK,YEMHL,IAAMK,UCHEL,IAAMK,UCAjBL,IAAMK,UCFHL,IAAMK,UCGNL,IAAMK,UCNJL,IAAMK,UCIXL,IAAMK,U,UCHZoC,EAJH,WACV,OAAO,kBAAC,EAAD,4BCHTC,IAAS9C,OAAO,kBAAC,EAAD,MAAS+C,SAASC,eAAe,U","file":"static/js/main.175d2658.chunk.js","sourcesContent":["import { v4 } from 'uuid';\r\n\r\n/**\r\n * Esta clase controla los nombres de los componentes\r\n * para que no se repiten en toda la web\r\n */\r\nclass AControl{\r\n    constructor(){\r\n        this.lista_controles = [];\r\n    }\r\n\r\n    GenerarUuidControl(){\r\n        let uuidValido = false;\r\n        let contador = 0;\r\n        let uuid = \"\";\r\n        while(!uuidValido){\r\n            uuid = v4();\r\n            if(!this.lista_controles.includes(uuid)){\r\n                uuidValido = true;\r\n                this.lista_controles.push(uuid);\r\n                break;\r\n            }\r\n\r\n            contador++;\r\n\r\n            if(contador > 500){\r\n                uuid = v4();\r\n                break;\r\n            }\r\n        }\r\n\r\n        return uuid;\r\n    }\r\n};\r\n\r\nconst aControl = new AControl();\r\nexport default aControl;","import React from \"react\";\r\nimport \"./AEtiqueta.css\";\r\n\r\n/**\r\n * @typedef PropsAEtiqueta\r\n * @property {boolean} [props.visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} [props.para] Id del control que se le asignará a la etiqueta\r\n * @property {string|StyleSheet} [props.estilos] Estilos que se le aplicarán a la etiqueta\r\n * @property {string} [props.className] Clase que se le aplicará a la etiqueta\r\n * @property {string} [props.para] Id del control que se le asignará a la etiqueta\r\n * @class AEtiqueta\r\n * @extends {React.Component<PropsAEtiqueta>}\r\n */\r\nclass AEtiqueta extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n        \r\n\r\n        if(visible){\r\n            return(\r\n                <label {...this.props} style={this.props.estilos} className={\"aetiqueta \" + this.props.className} htmlFor={this.props.para}>{this.props.children}</label>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AEtiqueta;","/**\r\n * Está clase proporciona o valida expresiones regulares estandares\r\n * o cualquier otra expresión regular que se desee validar\r\n */\r\nclass AExpReg {\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Evalua el patrón con la cadena de texto especificada\r\n     * si es valida devuelve true de lo contrario devuelve false\r\n     * @param {RegExp} expreg Recibe el patrón a evaluar(Expresión regular)\r\n     * @param {string} str Recibe la cadena de texto a evaluar\r\n     * @returns {boolean}\r\n     */\r\n    static validarExpresionRegular(expreg, str) {\r\n        return expreg.test(str);\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de numeros enteros\r\n     * al menos 1 numero entero entre 0 y 9\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroEntero() {\r\n        return /^[0-9]+$/\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de correo electrónico\r\n     * Una implementación del Estandard Official: RFC 5322: ( valida en el 99.99% de los emails existentes )\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerExpRegCorreoElectronico() {\r\n        return /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroTelefono() {\r\n        return /\\(?\\+[0-9]{1,3}\\)? ?-?[0-9]{1,3} ?-?[0-9]{3,5} ?-?[0-9]{4}( ?-?[0-9]{3})? ?(\\w{1,10}\\s?\\d{1,6})?/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNumeroTelefonoSinSignoMas() {\r\n        return /((\\(?\\+[0-9]{1,3}\\)? ?-?)|)[0-9]{1,3} ?-?[0-9]{3,5} ?-?[0-9]{4}( ?-?[0-9]{3})? ?(\\w{1,10}\\s?\\d{1,6})?/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular que valida solo letras con espacios\r\n     * @returns {RegExp} Devuelve una expresión\r\n     */\r\n    static obtenerRegSoloLetrasConEspacios() {\r\n        return /^[(a-z|A-Z) áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está funcioón devuelve una expresión regular que valida solo letras, numeros con espacios\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegSoloLetrasNumerosConEspacios() {\r\n        return /^[(a-z|A-Z)0-9 \\_\\-áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular que valida solo letras con espacios al menos 1 letra nada más\r\n     * @returns {RegExp} Devuele una expresión regular\r\n     */\r\n    static obtenerRegSoloLetrasConEspaciosAlMenos1Letra() {\r\n        return /^[a-zA-Z áéíóúÁÉÍÓÚ]+$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de direcciones de casas, negocios, etc.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegDirecciones() {\r\n        return /^[(a-z|A-Z) _\\.\\-,0-9\\n\\#áéíóúÁÉÍÓÚ]*$/gm\r\n    }\r\n\r\n    /**\r\n     * Está función devuelve una expresión regular de direcciones de casas, negocios, etc.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegNombreNegocio() {\r\n        return /^[(a-z|A-Z) _\\.\\-,0-9\\n\\#áéíóúÁÉÍÓÚ]+$/gm\r\n    }\r\n\r\n    /**\r\n     * La contraseña debe tener al entre 8 y 16 caracteres,\r\n     * al menos un dígito, al menos una minúscula,\r\n     * al menos una mayúscula y al menos un caracter no alfanumérico.\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegContrasena() {\r\n        return /(?=.*\\d)(?=.*[\\u0021-\\u002b\\u003c-\\u0040])(?=.*[A-Z])(?=.*[a-z])\\S{8,16}$/gm\r\n    }\r\n\r\n    /**\r\n     * Está expresión valida un pin de entre 4 y 8 digitos\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegParaPin() {\r\n        return /^\\d{4,8}/gm\r\n    }\r\n\r\n    /**\r\n     * Está expresión valida digitos enteros o que lleven 2 decimales\r\n     * @returns {RegExp} Devuelve una expresión regular\r\n     */\r\n    static obtenerRegParaNumerosCon2Decimales() {\r\n        return /^\\d+(\\.\\d{1,2})?$/gm\r\n    }\r\n\r\n    /**\r\n     * Valida un número entero, la cadena debe contener al menos un número entre 0 y 9\r\n     * @param {string} texto Texto de entrada para validar\r\n     * @returns {boolean} Devuelve verdadero si la cadena es valida\r\n     */\r\n    static validarNumeroEntero(texto) {\r\n        return AExpReg.obtenerRegNumeroEntero().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida un numeros entero o numeros con 2 decimales\r\n     * @param {string} texto Texto de entrada para validar\r\n     * @returns {boolean} Devuelve verdadero si la cadena es valida\r\n     */\r\n    static validarNumeroCon2Decimales(texto) {\r\n        return AExpReg.obtenerRegParaNumerosCon2Decimales().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida una cadena un pin de entre 4 y 8 digitos\r\n     * @param {string} texto Texto a validar\r\n     * @returns {boolean}\r\n     */\r\n    static validarPin(texto) {\r\n        return AExpReg.obtenerRegParaPin().test(texto);\r\n    }\r\n\r\n    /**\r\n     * La contraseña debe tener al entre 8 y 16 caracteres,\r\n     * al menos un dígito, al menos una minúscula,\r\n     * al menos una mayúscula y al menos un caracter no alfanumérico.\r\n     * @param {string} contrasena Parametro que recibe un string de la contraseña\r\n     * @returns {boolean} Devuelve una expresión regular\r\n     */\r\n    static validarContrasena(contrasena) {\r\n        return AExpReg.obtenerRegContrasena().test(contrasena);\r\n    }\r\n\r\n    /**\r\n     * Valida si el nombre de negocio contiene caracteres validos\r\n     * @param {string} nombre_negocio Recibe un nombre de negocio\r\n     * @returns {boolean}\r\n     */\r\n    static validarNombreNegocio(nombre_negocio) {\r\n        return AExpReg.obtenerRegDirecciones().test(nombre_negocio);\r\n    }\r\n\r\n    /**\r\n     * Está función valida un correo electrónico y devuelve verdadero o falso si el patrón coincide\r\n     * @param {string} correo Recibe el correo electrónico para validar\r\n     * @returns {boolean}\r\n     */\r\n    static validarCorreoElectronico(correo) {\r\n        return AExpReg.obtenerExpRegCorreoElectronico().test(correo);\r\n    }\r\n\r\n    /**\r\n     * Valida cualquier número de telefono\r\n     * @param {string} telefono Recibe cualquier número de Teléfono\r\n     * @returns {boolean} Devuelve verdadero si el número coincide, de lo contrario fallbackResource\r\n     */\r\n    static validarNumeroTelefonico(telefono) {\r\n        return AExpReg.obtenerRegNumeroTelefono().test(telefono);\r\n    }\r\n\r\n    /**\r\n     * Valida cualquier número de telefono sin signo mas obligatorio\r\n     * @param {string} telefono Recibe cualquier número de Teléfono\r\n     * @returns {boolean} Devuelve verdadero si el número coincide, de lo contrario fallbackResource\r\n     */\r\n    static validarNumeroTelefonicoSinSignoMas(telefono) {\r\n        return AExpReg.obtenerRegNumeroTelefonoSinSignoMas().test(telefono);\r\n    }\r\n\r\n    /**\r\n     * Validaa si el texto no contiene números o cualquier otro caracter que no sea de (A-Z|a-z) con espacios o sin espacios\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patron\r\n     */\r\n    static validarSoloLetrasConEspacios(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasConEspacios().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Valida si el texto no contiene números o cualquier otro caracter\r\n     * el texto debe contener al menos un caracter para que devuelva verdadero\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarSoloLetrasConEspaciosAlMenos1Letra(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasConEspaciosAlMenos1Letra().test(texto);\r\n    }\r\n\r\n    /**\r\n     * Está función valida si la dirección es contiene los caracteres correctos\r\n     * @param {string} direccion Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarDireccion(direccion) {\r\n        return AExpReg.obtenerRegDirecciones().test(direccion);\r\n    }\r\n\r\n    /**\r\n     * Está función valida si el texto contiene los caracteres correctos en relación con el patrón\r\n     * Si el patrón coincide con el texto devuelve verdadero, de lo contrario devuelve falso\r\n     * @param {string} texto Recibe el texto a validar\r\n     * @returns {boolean} Devuelve verdadero si el texto coincide con el patrón\r\n     */\r\n    static validarSoloLetrasNumerosConEspacios(texto) {\r\n        return AExpReg.obtenerRegSoloLetrasNumerosConEspacios().test(texto);\r\n    }\r\n\r\n};\r\n\r\nexport default AExpReg;","import React from \"react\";\r\nimport './ABoton.css';\r\n\r\n/**\r\n * @typedef PropsABoton\r\n * @property {MouseEvent} botonPresionado Evento que se ejecuta cuando se presiona el botón\r\n * @property {boolean} [visible] Si es true, se muestra el botón, si es false, no se muestra\r\n * @property {string} [className] Propiedad que le da estilos al botón\r\n * @property {\"button\"|\"submit\"|\"reset\"} [tipoBoton] Tipo de botón que se va a mostrar\r\n * @property {\"primario\"|\"secundario\"|\"ok\"|\"peligro\"|\"link\"} [tipoBotonColor] Le da color al boton\r\n * @property {StyleSheet} [estilos] Propiedad que le da estilos al botón\r\n * @extends {React.Component<PropsABoton>}\r\n */\r\nclass ABoton extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    /**\r\n     * Esta funcion envia el evento al componente padre\r\n     * @param {MouseEvent} e Evento que se ejecuta cuando se presiona el botón\r\n     */\r\n    _botonPresionado(e){\r\n        e.preventDefault();\r\n        this.props.botonPresionado(e);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n        let tipoBotonColor = \"primario\";\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(this.props.hasOwnProperty('tipoBotonColor')){\r\n            tipoBotonColor = this.props.tipoBotonColor;\r\n        }\r\n        \r\n        if(visible){\r\n            return (\r\n                <button\r\n                    className={\"aboton \" + tipoBotonColor + \" \" + this.props.className}\r\n                    type={this.props.tipoBoton || \"button\"}\r\n                    style={this.props.estilos}\r\n                    onClick={(e) => this._botonPresionado(e)}\r\n                >\r\n                    {this.props.children}\r\n                </button>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ABoton;","import React from \"react\";\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\nimport './ACajaTexto.css';\r\n\r\n// Componentes\r\nimport AEtiqueta from '../AEtiqueta';\r\n\r\n// Utilidades\r\nimport AExpReg from \"./../AUtileriaComponentes/AExpReg\";\r\n\r\n\r\n\r\n/**\r\n * @typedef PropsACajaTexto\r\n * @property {boolean} [visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} valor Valor que se muestra en el control\r\n * @property {FunctionStringCallback} [cambioTexto] Función que se ejecuta cuando se cambia el texto\r\n * @property {string} [titulo] Texto que se mostrará en la etiqueta\r\n * @property {IconType} [icono] Icono que se mostrará junto al texto\r\n * @property {StyleSheet} [estilos] Propiedad que le da estilos al contenedor\r\n * @property {string} [tipo] Propiedad que le dice al control si es de tipo texto o password o email, etc.\r\n * @property {boolean} [requerido] Si es true, se marca como obligatorio\r\n * @property {string} [expRegular] Expresión regular que se aplicará al texto\r\n * @property {string} [className] Propiedad que le da estilos al contenedor\r\n * @property {string} [classNameTitulo] Propiedad que le da estilos al titulo\r\n * @property {string} [estilosTitulo] Propiedad que le da estilos al titulo\r\n * @property {string} [classNameTexto] Propiedad que le da estilos a la caja de texto (input)\r\n * @property {string} [estilosTexto] Propiedad que le da estilos a la caja de texto (input)\r\n * @property {string} [classNameError] Propiedad que le da estilos al texto de error\r\n * @property {string} [estilosError] Propiedad que le da estilos al texto de error\r\n * @property {string} [placeholder] Texto que se muestra en el control cuando no hay texto\r\n * @property {boolean} [autoFocus] Si es true, se pone el foco en el control\r\n * @extends {React.Component<PropsACajaTexto>}\r\n */\r\nclass ACajaTexto extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            lbd_error: \"\"\r\n        };\r\n        this.uuid = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    get TipoAControl(){\r\n        return \"ACajaTexto\";\r\n    }\r\n\r\n    /**\r\n     * Obtiene el nombre del control\r\n     * @returns {string}\r\n     */\r\n    get Refuuid(){\r\n        return this.uuid;\r\n    }\r\n\r\n    /**\r\n     * Está función envia el texto al padre\r\n     * @param {string} texto Texto que se ingresó en el control\r\n     */\r\n    _cambioTexto(texto){\r\n        if(this.props.hasOwnProperty('cambioTexto')){\r\n\r\n            let expReg = this.props.expRegular;\r\n\r\n            if(expReg !== undefined){\r\n                if(!AExpReg.validarExpresionRegular(expReg, texto)){\r\n                    this.setState({\r\n                        lbd_error: \"El texto no cumple con los caracteres validos\"\r\n                    });\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        lbd_error: \"\"\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.props.cambioTexto(texto);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Esta función coloca un texto de error en el componente\r\n     * @param {string} err \r\n     */\r\n    FijarMsjError(err){\r\n        this.setState({\r\n            lbd_error: err\r\n        });\r\n    }\r\n\r\n    TituloACajaTexto = () => {\r\n        if(this.props.hasOwnProperty('titulo')){\r\n            return (\r\n                <AEtiqueta\r\n                    para={this.uuid}\r\n                    className={this.props.classNameTitulo}\r\n                    estilos={this.props.estilosTitulo}\r\n                >\r\n                    {this.props.titulo}\r\n                </AEtiqueta>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n\r\n    TextoError = () => {\r\n        if(this.state.lbd_error === \"\"){\r\n            return <></>;\r\n        }\r\n        else{\r\n            return(\r\n                <AEtiqueta\r\n                    className={\"acajatexto-error \" + this.props.classNameError}\r\n                    estilos={this.props.estilosError}\r\n                >\r\n                    Error\r\n                </AEtiqueta>\r\n            );\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div\r\n                    className={\"acajatexto \" + this.props.className}\r\n                    style={this.props.estilos}\r\n                >\r\n                    <this.TituloACajaTexto />\r\n                    <div className=\"acajatexto-contenedor\" style={{ width: \"100%\" }}>\r\n                        <input\r\n                            required={this.props.requerido}\r\n                            value={this.props.valor}\r\n                            type={this.props.tipo || \"text\"}\r\n                            name={this.uuid}\r\n                            id={this.uuid}\r\n                            className={\"acajatexto-txt \" + this.props.classNameTexto}\r\n                            onChange={(e) => {e.preventDefault(); this._cambioTexto(e.target.value)}}\r\n                            pattern={this.props.expRegular}\r\n                            placeholder={this.props.placeholder}\r\n                            style={this.props.estilosTexto}\r\n                            autoFocus={this.props.autoFocus}\r\n                        />\r\n                        {\r\n                            this.props.hasOwnProperty('icono') &&\r\n                            <div className=\"acajatexto-contenedor-icono\">\r\n                                {this.props.icono}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <this.TextoError />\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ACajaTexto;","import React from 'react';\r\nimport './ATelefono.css';\r\nimport ABoton from './../ABoton';\r\nimport { FiSearch } from 'react-icons/fi';\r\nimport Telefono from './../../Recursos/Imagenes/telefono_blanco.png';\r\n\r\n/**\r\n * @typedef PropsATelefono\r\n * @property {boolean} [visible] Si el telefono esta visible o no.\r\n * @property {string} [className] Clase estilos CSS.\r\n * @property {string} [classNameABotones] Clase estilos CSS para los botones.\r\n * @property {StyleSheet} [estilosABotones] Estilos CSS para los botones.\r\n * @property {string} [classNamePublicidad] Clase estilos CSS para la publicidad.\r\n * @property {StyleSheet} [estilosPublicidad] Estilos CSS para la publicidad.\r\n * @property {string} titulo Titulo del telefono.\r\n * @property {string[]} botones Lista de botones a renderizar\r\n * @property {StyleSheet} [estilos] Estilos CSS.\r\n * @extends {React.Props<PropsATelefono>}\r\n */\r\nclass ATelefono extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div className={'atelefono ' + this.props.className} style={this.props.estilos}>\r\n                    <div className='atelefono-contenedor-telefono'>\r\n                        <img src={Telefono} alt='Teléfono' />\r\n                    </div>\r\n                    <div className='atelefono-contenedor-datos'>\r\n                        <div className='atelefono-titulo'>\r\n                            <div className='atelefono-titulo-items'>{this.props.titulo}</div>\r\n                            <FiSearch className='atelefono-titulo-items' />\r\n                        </div>\r\n                        <div className={'atelefono-publicidad ' + this.props.classNamePublicidad} style={this.props.estilosPublicidad}>\r\n                            {this.props.children}\r\n                        </div>\r\n                        <div className='atelefono-botones'>\r\n                            {\r\n                                this.props.botones.map((boton, indice) => {\r\n                                    return(\r\n                                        <ABoton className={'atelefono-boton ' + this.props.classNameABotones} key={indice} estilos={this.props.estilosABotones}>\r\n                                            {boton}\r\n                                        </ABoton>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ATelefono;","import React from 'react';\r\nimport './ATitulosPantallas.css';\r\n\r\n/**\r\n * @typedef PropsATitulosPantallas\r\n * @property {string} [className] Clase CSS para el componente.\r\n * @property {string} [classNameTitulo] Clase CSS para el titulo.\r\n * @property {StyleSheet} [estilosTitulo] Estilos CSS para el titulo.\r\n * @property {string} [classNameTelefono] Clase CSS para el telefono.\r\n * @property {StyleSheet} [estilosTelefono] Estilos CSS para el telefono.\r\n * @property {boolean} [visible] Indica si el componente debe ser visible o no.\r\n * @property {string} titulo Titulo que se mostrará en la pantalla.\r\n * @property {string} telefono Telefono que se mostrará en la pantalla.\r\n * @property {StyleSheet} [estilos] Estilos CSS para el componente.\r\n * @extends {React.Component<PropsATitulosPantallas>}\r\n */\r\nclass ATitulosPantallas extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div\r\n                className={'atitulospantallas ' + this.props.className}\r\n                style={this.props.estilos}\r\n            >\r\n                <h2 className={this.props.classNameTitulo} style={this.props.estilosTitulo}>{this.props.titulo}</h2>\r\n                <p className={this.props.classNameTelefono} style={this.props.estilosTelefono}>Para asesoría llamar al teléfono: {this.props.telefono}</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ATitulosPantallas;","import React from 'react';\r\nimport './ATabla.css';\r\n\r\n/**\r\n * @typedef PropsATabla\r\n * @property {string} [className] Clase CSS para el componente.\r\n * @property {Array<string|React.Component|number>} [encabezados] Texto o componente que se mostrará en el encabezado de la tabla.\r\n * @property {Array<Array<string|React.Component|number>>} [datos] Datos que se mostrarán en la tabla.\r\n * @property {string} [classNameFila] Clase CSS para las filas de la tabla.\r\n * @property {StyleSheet} [estilosFila] Estilos CSS para las filas de la tabla.\r\n * @property {string} [classNameCelda] Clase CSS para las celdas de la tabla.\r\n * @property {StyleSheet} [estilosCelda] Estilos CSS para las celdas de la tabla.\r\n * @property {string} [classNameDatos] Clase CSS para los datos de la tabla.\r\n * @property {StyleSheet} [estilosDatos] Estilos CSS para los datos de la tabla.\r\n * @extends {React.Component<PropsATabla>}\r\n */\r\nclass ATabla extends React.Component {\r\n\r\n    render() {\r\n        let visible = true;\r\n\r\n        if (this.props.hasOwnProperty('visible')) {\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if (visible) {\r\n            return (\r\n                <div className={\"atabla \" + this.props.className}>\r\n                    <table className='atabla-tabla'>\r\n                        <thead className='atabla-cabeceras'>\r\n                            <tr>\r\n                                {\r\n                                    this.props.encabezados.map((objeto, indice) => {\r\n                                        return (\r\n                                            <th className='atabla-cabecera' key={indice}>\r\n                                                {objeto}\r\n                                            </th>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className={'atabla-contenido ' + this.props.classNameDatos} style={this.props.estilosDatos}>\r\n                            {\r\n                                this.props.datos.map((fila, indice) => {\r\n                                    return (\r\n                                        <tr\r\n                                            key={indice}\r\n                                            className={\"atabla-fila \" + this.props.classNameFila}\r\n                                            style={this.props.estilosFila}\r\n                                        >\r\n                                            {\r\n                                                fila.map((objeto, indice) => {\r\n                                                    return (\r\n                                                        <td\r\n                                                            className={'atabla-celda ' + this.props.classNameCelda}\r\n                                                            key={indice}\r\n                                                            style={this.props.estilosCelda}\r\n                                                        >\r\n                                                            {objeto}\r\n                                                        </td>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </tr>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default ATabla;","import React from 'react';\r\nimport './ACheckBox.css';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\n\r\n/**\r\n * @typedef PropsACheckBox\r\n * @property {string} [texto] Texto que se muestra a la par checkbox\r\n * @property {StyleSheet} [estilos] Estilos CSS para el componente\r\n * @property {boolean} [visible] Si es true se muestra, si es false no se muestra\r\n * @property {string} [className] Clase css que se le pone al componente\r\n * @property {boolean} valor Si es true se marca, si es false no se marca\r\n * @property {import('react').ChangeEvent} cambioCheck Función que se ejecuta al cambiar el checkbox\r\n * @extends {React.Component<PropsACheckBox>}\r\n */\r\nclass ACheckBox extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    _acheckbox_cambia(){\r\n        this.props.cambioCheck(!this.props.valor);\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty('visible')){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <label\r\n                    className={'acheckbox ' + this.props.className}\r\n                    htmlFor={this.uuidAControl}\r\n                    style={this.props.estilos}\r\n                >\r\n                    {this.props.texto}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name={this.uuidAControl}\r\n                        id={this.uuidAControl}\r\n                        checked={this.props.valor}\r\n                        onChange={() => this._acheckbox_cambia()}\r\n                    />\r\n                    <span className='checkmark'></span>\r\n                </label>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ACheckBox;","import React from 'react';\r\nimport './AArchivos.css';\r\nimport AEtiqueta from './../AEtiqueta';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n/**\r\n * \r\n * @typedef PropsAArchivos\r\n * @property {string} texto Texto que se muestra en el control\r\n * @property {boolean} [visible] Si es true, se muestra la etiqueta, si es false, no se muestra\r\n * @property {string} [className] Clase CSS del contenedor\r\n * @property {string} [classNameEtiqueta] Clase CSS de la etiqueta\r\n * @property {FileCallback} subioArchivo Función que se ejecuta cuando se sube un archivo\r\n * @extends {React.Component<PropsAArchivos>}\r\n */\r\nclass AArchivos extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    /**\r\n     * @param {string} nombre_archivo Nombre del archivo\r\n     * @returns {boolean} Si es true, es un archivo válido, si es false, no es un archivo válido\r\n     */\r\n    _esArchivoValido(nombre_archivo){\r\n        let extensiones_permitidas = [\".mp4\", \".png\", \".gif\", \".jpeg\", \".jpg\"];\r\n        for(let i = 0; i < extensiones_permitidas.length; i++){\r\n            if(nombre_archivo.toLowerCase().endsWith(extensiones_permitidas[i])){\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Esta funcion se ejecuta cuando se sube un archivo\r\n     * @param {React.ChangeEvent<HTMLInputElement>} e \r\n     */\r\n    _subieronArchivo(e){\r\n        e.preventDefault();\r\n        if(e.target.files.length > 1){\r\n            Swal.fire(\"Advertencia\", \"Solo se puede subir un archivo a la vez\", \"warning\");\r\n        }\r\n        else\r\n        if(e.target.files.length > 0){\r\n            let archivo = e.target.files[0];\r\n            if(this._esArchivoValido(archivo.name)){\r\n                this.props.subioArchivo(archivo);\r\n            }\r\n            else{\r\n                Swal.fire(\"Advertencia\", \"El archivo no es válido\", \"warning\");\r\n            }\r\n        }\r\n        else{\r\n            this.props.subioArchivo(new File([], \"\"));\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let visible = true;\r\n\r\n        if(this.props.hasOwnProperty(\"visible\")){\r\n            visible = this.props.visible;\r\n        }\r\n\r\n        if(visible){\r\n            return(\r\n                <div className={'aarchivos ' + this.props.className}>\r\n                    <input type=\"file\" id={this.uuidAControl} name={this.uuidAControl} accept={\"video/mp4, image/png, image/gif, image/jpeg\"} className={\"aarchivos-input\"} onChange={(e) => this._subieronArchivo(e)} />\r\n                    <AEtiqueta\r\n                        para={this.uuidAControl}\r\n                        className={\"aarchivos-etiqueta \" + this.props.classNameEtiqueta}\r\n                    >{this.props.texto}</AEtiqueta>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return <></>;\r\n        }\r\n    }\r\n};\r\n\r\nexport default AArchivos;","import React from 'react';\r\nimport './AMultimedia.css';\r\nimport AControl from './../AUtileriaComponentes/AControl';\r\n\r\n\r\n/**\r\n * @typedef PropsAMultimedia\r\n * @property {string} [className] Clase CSS\r\n * @property {StyleSheet} [estilos] Estilos CSS\r\n * @extends {React.Component<PropsAMultimedia>}\r\n */\r\nclass AMultimedia extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tipoMultimedia: \"imagen\"\r\n        }\r\n        this.uuidAControl = AControl.GenerarUuidControl();\r\n    }\r\n\r\n    /**\r\n     * Esta funcion dibuja en pantalla lo que trae en el archivo\r\n     * @param {File|Blob} archivo Archivo que se va a mostrar en pantalla\r\n     */\r\n    FijarArchivo(archivo) {\r\n        if(archivo instanceof Blob){\r\n\r\n            this.setState({ tipoMultimedia: \"imagen\" });\r\n\r\n            setTimeout(() => {\r\n                let archivoBlob = URL.createObjectURL(archivo);\r\n                document.getElementById(this.uuidAControl).src = archivoBlob;\r\n            }, 100);\r\n        }\r\n        else{\r\n            if(archivo.name.endsWith(\".mp4\")){\r\n                this.setState({ tipoMultimedia: \"video\" });\r\n            }\r\n            else{\r\n                this.setState({ tipoMultimedia: \"imagen\" });\r\n            }\r\n    \r\n            setTimeout(() => {\r\n                let archivoBlob = URL.createObjectURL(archivo);\r\n                document.getElementById(this.uuidAControl).src = archivoBlob;\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {\r\n                    this.state.tipoMultimedia === \"imagen\" &&\r\n                    <img id={this.uuidAControl} className={'amultimedia ' + this.className} style={this.props.estilos} alt={\"Archivo multimedia.\"} />\r\n                }\r\n                {\r\n                    this.state.tipoMultimedia === \"video\" &&\r\n                    <video id={this.uuidAControl} controls autoPlay className={'amultimedia ' + this.className} style={this.props.estilos}>\r\n                        Este navegador no soporta una previsualización del contenido multimedia.\r\n                    </video>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nexport default AMultimedia;","import React from \"react\";\r\nimport './APanel.css';\r\n\r\n/**\r\n * @typedef PropsAPanel\r\n * @property {string} className Clase CSS\r\n * @property {string} classNameFondo Clase CSS del fondo\r\n * @property {string} classNameTitulo Clase CSS del titulo\r\n * @property {boolean} visible Si es visible se muestra el modal\r\n * @property {boolean} [transparente] Si es transparente no muestra un fondo de lo contrario el fondo se pone con un color negro transparente, por defecto es false\r\n * @property {string} titulo Título del panel\r\n * @extends {React.Component<PropsAPanel>}\r\n * Esta clase es una componente que se sobre pone por encima de todo el HTML\r\n * actuando como un modal\r\n */\r\nclass APanel extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {\r\n                    this.props.visible &&\r\n                    <div\r\n                        className={\"apanel-fondo \" + this.props.classNameFondo}\r\n                        style={{\r\n                                background: this.props.transparente ? 'rgba(0,0,0,0)' : 'rgba(0,0,0,0.5)',\r\n                            }}\r\n                    >\r\n                        <div\r\n                            className={\"apanel \" + this.props.className}\r\n                        >\r\n                            <div\r\n                                className={\"apanel-titulo \" + this.props.classNameTitulo}\r\n                            >\r\n                                <p>{this.props.titulo}</p>\r\n                            </div>\r\n                            <div\r\n                                className={\"apanel-contenido \" + this.props.className}\r\n                            >\r\n                                {this.props.children}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default APanel;","import React from 'react'\n\nimport { ExampleComponent } from 'react-acomponentes'\nimport 'react-acomponentes/dist/index.css'\nimport {\n  ABoton\n} from 'react-acomponentes';\n\nconst App = () => {\n  return <ABoton>Funciona el ABoton</ABoton>;\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}